import UIKit

protocol {{ module_info.name }}PresenterProtocol: AnyObject {

}

final class {{ module_info.name }}ViewController: UIViewController {
    private let moduleView: {{ module_info.name }}ViewProtocol
    private let interactor: {{ module_info.name }}InteractorProtocol
    private let router: {{ module_info.name }}RouterProtocol

    init(view: {{ module_info.name }}ViewProtocol, interactor: {{ module_info.name }}InteractorProtocol, router: {{ module_info.name }}RouterProtocol) {
        self.moduleView = view
        self.interactor = interactor
        self.router = router

        super.init(nibName: nil, bundle: nil)
    }

    override func loadView() {
        view = moduleView.view
    }

    override func viewDidLoad() {
        super.viewDidLoad()
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

extension {{ module_info.name }}ViewController: {{ module_info.name }}PresenterProtocol {

}
